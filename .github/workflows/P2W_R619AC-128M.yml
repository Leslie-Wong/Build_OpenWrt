###########################################################
#   Description: Compile OpenWrt by GitHub Actions        #
#   Based on: https://github.com/P3TERX/Actions-OpenWrt   #
#   Author: Hyy2001X                                      #
###########################################################

name: AutoBuild-P2W_R619AC-128M


### 以下内容请保持不变
on:
  schedule:
    - cron: 30 22 * * *
    
  repository_dispatch:
  workflow_dispatch:
    inputs:
      SSH:
        description: 'SSH 连接到 Actions'
        required: true
        default: 'false'
      IP:
        description: '固件 IP 地址 [可选]'
        default: '192.168.1.1'
      DELETE_USELESS_FILES:
        description: '清理无用文件 [可选]'
        default: 'true'
### END

### 环境变量设置
env:
  DEFAULT_TARGET: p2w_r619ac-128m
  DEFAULT_SOURCE: coolsnowwolf/lede:master
  # REPO_URL: https://github.com/coolsnowwolf/lede
  # REPO_BRANCH: master
  CONFIG_FILE: p2w_r619ac-128m
  UPLOAD_COWTRANSFER: true
  UPLOAD_WETRANSFER: true
# 上传固件到 Github Releases
  UPLOAD_RELEASES: true
# 上传固件到 Github Artifacts
  UPLOAD_ARTIFACTS: true
# 上传 bin 文件夹到 Github Artifacts
  UPLOAD_BIN_ARTIFACTS: true
# 删除早期的 workflow 任务
  REMOVE_OLD_RELEASE: true
  REMOVE_WORKFLOW_RUNS: true
# Name for upload to Release
  UPLOAD_RELEASE_NAME: P2W_R619AC_AutoBuild
  FILE_DATE: $(date +"%Y%m%d_%H%M")
# 删除无用文件以增加编译空间
  DELETE_USELESS_FILES: true
  
### END

jobs:
  Compile:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@main

    - name: Initialization Define Info
      run: |
        #CONFIG_FILE=${{ env.CONFIG_FILE }}
        DEFAULT_SOURCE=${{ env.DEFAULT_SOURCE }}
        DELETE_USELESS_FILES=${{ env.DELETE_USELESS_FILES }}
        #echo "CONFIG_FILE=$CONFIG_FILE" >> $GITHUB_ENV
        echo "DELETE_USELESS_FILES=$DELETE_USELESS_FILES" >> $GITHUB_ENV
        #[ ! -f "$GITHUB_WORKSPACE/ConfigFiles/$CONFIG_FILE" ] && {
        #    echo "Config_File: [/ConfigFiles/$CONFIG_FILE] is not detected!"
        #    exit 1
        #}
        export REPO_URL="https://github.com/$(echo $DEFAULT_SOURCE | cut -d \: -f 1)"
        export REPO_BRANCH=$(echo $DEFAULT_SOURCE | cut -d \: -f 2)
        [ -z $REPO_BRANCH ] && REPO_BRANCH=master
        echo "REPO_URL=$REPO_URL" >> $GITHUB_ENV
        echo "REPO_BRANCH=$REPO_BRANCH" >> $GITHUB_ENV
        
    - name: Initialization Environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo -E apt-get update
        sudo -E apt-get -y install build-essential cmake asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs git-core gcc-multilib g++-multilib p7zip p7zip-full msmtp libssl-dev texinfo libreadline-dev libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint ccache curl wget vim nano python2.7 python3 python3-pip python3-ply haveged lrzsz device-tree-compiler scons antlr3 gperf intltool mkisofs rsync
        sudo timedatectl set-timezone "Asia/Shanghai"
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir
        if [ "$DELETE_USELESS_FILES" == true ];then
            docker rmi $(docker images -q)
            sudo rm -rf /usr/share/dotnet /etc/mysql /etc/php
            sudo -E apt-get -y autoremove --purge
            sudo -E apt-get clean
        fi
        echo "Compile_Date=$(date +%Y%m%d%H%M)" > $GITHUB_WORKSPACE/Openwrt.info
        echo "Display_Date=$(date +%Y/%m/%d)" >> $GITHUB_WORKSPACE/Openwrt.info
        echo "Before_IP_Address=${{ github.event.inputs.IP }}" >> $GITHUB_WORKSPACE/Openwrt.info
        echo "Openwrt_Repository=$REPO_URL" >> $GITHUB_WORKSPACE/Openwrt.info
        echo "Artifacts_Date=$(date +%m%d%H%M)" >> $GITHUB_ENV

    - name: Clone Build Script
      run: |
        git clone https://github.com/Hyy2001X/AutoBuild-Actions.git
        cd AutoBuild-Actions/
        mv * ../
        cd ../
        sed -i 's/Author=Hyy2001/Author=LesLie.W/g' Scripts/AutoBuild_DiyScript.sh
        sed -i 's/INCLUDE_AutoBuild_Features=true/INCLUDE_AutoBuild_Features=false/g' Scripts/AutoBuild_DiyScript.sh
        # sed -i 's/smartdns kenzok8/smartdns liuran001/g' Scripts/AutoBuild_ExtraPackages.sh
        # sed -i 's/-${CURRENT_Version}-${FW_Boot_Type}-$(Get_SHA256 $1).${Firmware_Format_Defined}/-${CURRENT_Version}-${FW_Boot_Type}/g' Scripts/AutoBuild_Function.sh
        # sed -i 's/-${CURRENT_Version}-$(Get_SHA256 $1).${Firmware_Format_Defined}/-${CURRENT_Version}/g' Scripts/AutoBuild_Function.sh
        cp -rf ConfigFiles/$CONFIG_FILE Configs/$CONFIG_FILE
        
    - name: Clone Openwrt Source Code
      run: |
        git clone -b $REPO_BRANCH $REPO_URL openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt
        cd openwrt
        sed -i '$a src-git passwall https://github.com/xiaorouji/openwrt-passwall.git' feeds.conf.default
        ./scripts/feeds update -a
        ./scripts/feeds install -a > /dev/null 2>&1

        
    - name: SSH Connection to Actions
      uses: P3TERX/ssh2actions@v1.0.0
      if: (github.event.inputs.SSH == 'true' && github.event.inputs.SSH  != 'false') || contains(github.event.action, 'SSH')
      env:
        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        
    - name: Run AutoBuild_DiyScript.sh
      run: |
        chmod +x Scripts/AutoBuild_*.sh
        cp $GITHUB_WORKSPACE/Configs/$CONFIG_FILE openwrt/.config
        cd openwrt
        make defconfig
        source $GITHUB_WORKSPACE/Scripts/AutoBuild_DiyScript.sh
        source $GITHUB_WORKSPACE/Scripts/AutoBuild_Function.sh
        Firmware_Diy_Before
        rm .config && cp $GITHUB_WORKSPACE/Configs/$CONFIG_FILE .config
        Firmware_Diy_Main
        Firmware_Diy
      
#     - name: Run Copy Config File
#       run: |
#         cp $GITHUB_WORKSPACE/ConfigFiles/$CONFIG_FILE openwrt/.config
        
    - name: SSH Connection to Actions
      uses: P3TERX/ssh2actions@v1.0.0
      if: (github.event.inputs.SSH == 'true' && github.event.inputs.SSH  != 'false') || contains(github.event.action, 'SSH')
      env:
        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        
    - name: Add Custom Settings
      run: |
        cp -rf settings/* ./openwrt/

    - name: Compile
      run: |
        cd openwrt
        source $GITHUB_WORKSPACE/Scripts/AutoBuild_Function.sh
        Firmware_Diy_Other
        ./scripts/feeds install -a > /dev/null 2>&1
        make defconfig
        make download -j$(nproc)
        make -j$(nproc) || make -j1 V=s
        [ $? == 0 ] && echo "Result=true" >> $GITHUB_ENV || echo "Result=false" >> $GITHUB_ENV
        echo "Compile_Result=$Compile_Result" >> $GITHUB_ENV
        echo "FILE_DATE=_$(date +"%Y%m%d_%H%M")" >> $GITHUB_ENV

        
    - name: Zip files
      run: |
        #export FILE_DATE=$(date +"%Y%m%d_%H%M")
        #echo "FILE_DATE=$(date +"%Y%m%d_%H%M")" >> $GITHUB_ENV
        mkdir upload_files
        cd openwrt/bin
        tar -zcvf ../../upload_files/packages_${{ env.FILE_DATE }}.tar.gz packages
        tar -zcvf ../../upload_files/targets_${{ env.FILE_DATE }}.tar.gz targets
        cp -rf targets/ipq40xx/generic/* ../../upload_files
        cd $GITHUB_WORKSPACE/upload_files
        echo "UPLOADFILES=$PWD" >> $GITHUB_ENV
        
    - name: Upload firmware to cowtransfer
      id: cowtransfer
      if: env.UPLOAD_COWTRANSFER == 'true' && !cancelled()
      run: |
        curl -fsSL git.io/file-transfer | sh
        ./transfer cow --block 2621440 -s -p 64 --no-progress upload_files 2>&1 | tee cowtransfer.log
        echo "::warning file=cowtransfer.com::$(cat cowtransfer.log | grep https)"
        echo "::set-output name=url::$(cat cowtransfer.log | grep https | cut -f3 -d" ")"
        
    - name: Upload firmware to WeTransfer
      id: wetransfer
      if: env.UPLOAD_WETRANSFER == 'true' && !cancelled()
      run: |
        curl -fsSL git.io/file-transfer | sh
        ./transfer wet -s -p 16 --no-progress upload_files 2>&1 | tee wetransfer.log
        echo "::warning file=wetransfer.com::$(cat wetransfer.log | grep https)"
        echo "::set-output name=url::$(cat wetransfer.log | grep https | cut -f3 -d" ")"
        
    - name: Process Firmware
      if: env.Result == 'true' && !cancelled()
      run: |
        cd openwrt
        source $GITHUB_WORKSPACE/Scripts/AutoBuild_Function.sh
        Firmware_Diy_End
        
    - name: Upload Firmware to Artifacts
      uses: actions/upload-artifact@main
      if: env.UPLOAD_ARTIFACTS == 'true' && env.Result == 'true' && !cancelled()
      with:
        name: ${{ env.DEFAULT_TARGET }}_${{ env.REPO_BRANCH }}_firmware_${{ env.Artifacts_Date }}
        path: openwrt/bin/Firmware

    - name: Generate release tag
      id: tag
      if: env.UPLOAD_RELEASES == 'true' && env.Result == 'true' && !cancelled()
      run: |
        echo "::set-output name=release_tag::${{ env.UPLOAD_RELEASE_NAME }}_${{ env.FILE_DATE }}"
        touch release.txt
        echo "${{ env.FILE_DATE }}:" >> release.txt
        [ $UPLOAD_COWTRANSFER = true ] && echo "🔗 [Cowtransfer](${{ steps.cowtransfer.outputs.url }})" >> release.txt
        [ $UPLOAD_WETRANSFER = true ] && echo "🔗 [WeTransfer](${{ steps.wetransfer.outputs.url }})" >> release.txt
        echo "::set-output name=status::success"
        
    - name: Upload bin to Artifacts
      uses: actions/upload-artifact@main
      if: env.UPLOAD_BIN_ARTIFACTS == 'true' && env.Result == 'true' && !cancelled()
      with:
        name: ${{ env.DEFAULT_TARGET }}_${{ env.REPO_BRANCH }}_bin_${{ env.Artifacts_Date }}
        path: openwrt/bin

    - name: Upload Firmware to Github Releases
      uses: softprops/action-gh-release@v1
      if: env.UPLOAD_RELEASES == 'true' && env.Compile_Result == 'true' && !cancelled()
      env:
        GITHUB_TOKEN: ${{ secrets.OPENWRT_TOKEN }}
      with:
        tag_name: ${{ steps.tag.outputs.release_tag }}
        body_path: release.txt
        files: openwrt/bin/Firmware/*
        
    - name: Download Github Release API
      if: env.UPLOAD_RELEASES == 'true' && env.Result == 'true' && !cancelled()
      run: |
        wget https://api.github.com/repos/${{github.repository}}/releases/tags/AutoUpdate -O API
        
    - name: Upload API to Github Release
      if: env.UPLOAD_RELEASES == 'true' && env.Result == 'true' && !cancelled()
      uses: svenstaro/upload-release-action@v2
      with:
        repo_token: ${{ secrets.OPENWRT_TOKEN }}
        file: ./API
        file_glob: true
        tag: ${{ steps.tag.outputs.release_tag }}
        overwrite: true

    - name: Remove old Release
      uses: dev-drprasad/delete-older-releases@v0.1.0
      if: env.REMOVE_OLD_RELEASE == 'true' && !cancelled()
      with:
        keep_latest: 10
        delete_tags: true
      env:
        GITHUB_TOKEN: ${{ secrets.OPENWRT_TOKEN }}
        
    - name: Remove workflow runs
      uses: GitRML/delete-workflow-runs@main
      if: env.REMOVE_WORKFLOW_RUNS == 'true' && !cancelled()
      with:
        retain_days: 11
        keep_minimum_runs: 10
